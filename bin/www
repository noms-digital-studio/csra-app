#!/usr/bin/env node

// Load any extra environment variables from .env
require('dotenv').config();

const http = require('http');

const appInsights = require('../utils/applicationinsights');
const { logger: log } = require('../server/services/logger');
const config = require('../server/config');
const app = require('../server/index');


const normalizePort = (val) => {
  const parsedPort = parseInt(val, 10);

  if (isNaN(parsedPort)) {
    // named pipe
    return val;
  }

  if (parsedPort >= 0) {
    // port number
    return parsedPort;
  }

  return false;
};
const start = Date.now();
const port = normalizePort(config.port);

app.set('port', port);

const server = http.createServer(app);

log.info('Application startup');

server.listen(port);

server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      throw new Error(`${bind} requires elevated privileges`);
    case 'EADDRINUSE':
      throw new Error(`${bind} is already in use`);
    default:
      throw error;
  }
});

server.on('listening', () => {
  const duration = Date.now() - start;
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  log.info(`Listening on ${bind}`);

  appInsights.client.trackMetric('server startup time', duration);
});
