#!/usr/bin/env node

/* eslint-disable no-console */

require('babel-register')();
const http = require('http');

const appInsights = require('../utils/applicationinsights');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const parsedPort = parseInt(val, 10);

  if (isNaN(parsedPort)) {
    // named pipe
    return val;
  }

  if (parsedPort >= 0) {
    // port number
    return parsedPort;
  }

  return false;
}

const config = require('../server/config').default;
const createDB = require('../server/db').default;
const createApp = require('../server/app').default;

console.log('booting csra');
const start = Date.now();

const db = createDB();
const app = createApp(db);

const port = normalizePort(config.port);
app.set('port', port);

const server = http.createServer(app);
server.listen(port);
server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      throw new Error(`${bind} requires elevated privileges`);
    case 'EADDRINUSE':
      throw new Error(`${bind} is already in use`);
    default:
      throw error;
  }
});
server.on('listening', () => {
  const duration = Date.now() - start;
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`Listening on ${bind}`);
  appInsights.client.trackMetric('server startup time', duration);
});
